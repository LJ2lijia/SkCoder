#!/usr/bin/env python
# coding=utf-8

import logging
import os
from pathlib import Path
import sys
from dataclasses import dataclass, field
from typing import Optional

import datasets
import numpy as np
from datasets import ClassLabel, load_dataset, load_metric

import transformers
from transformers import (
  AutoConfig,
  AutoModelForTokenClassification,
  AutoTokenizer,
  DataCollatorForTokenClassification,
  HfArgumentParser,
  PretrainedConfig,
  PreTrainedTokenizerFast,
  Trainer,
  TrainingArguments,
  set_seed,
)
from transformers.trainer_utils import get_last_checkpoint



logger = logging.getLogger(__name__)


@dataclass
class ModelArguments:
  """
  Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.
  """

  model_name_or_path: str = field(
    metadata={"help": "Path to pretrained model or model identifier from huggingface.co/models"}
  )
  run_dir: Optional[str] = field(
    default=None, metadata=dict(help="path specific to this run")
  )
  config_name: Optional[str] = field(
    default=None, metadata={"help": "Pretrained config name or path if not the same as model_name"}
  )
  tokenizer_name: Optional[str] = field(
    default=None, metadata={"help": "Pretrained tokenizer name or path if not the same as model_name"}
  )
  cache_dir: Optional[str] = field(
    default=None,
    metadata={"help": "Where do you want to store the pretrained models downloaded from huggingface.co"},
  )

@dataclass
class DataTrainingArguments:
  """
  Arguments pertaining to what data we are going to input our model for training and eval.
  """

  train_file: Optional[str] = field(
    default=None, metadata={"help": "The input training data file (a csv or JSON file)."}
  )
  validation_file: Optional[str] = field(
    default=None,
    metadata={"help": "An optional input evaluation data file to evaluate on (a csv or JSON file)."},
  )
  test_file: Optional[str] = field(
    default=None,
    metadata={"help": "An optional input test data file to predict on (a csv or JSON file)."},
  )
  overwrite_cache: bool = field(
    default=False, metadata={"help": "Overwrite the cached training and evaluation sets"}
  )
  preprocessing_num_workers: Optional[int] = field(
    default=None,
    metadata={"help": "The number of processes to use for the preprocessing."},
  )
  max_seq_length: int = field(
    default=None,
    metadata={
      "help": (
        "The maximum total input sequence length after tokenization. If set, sequences longer "
        "than this will be truncated, sequences shorter will be padded."
      )
    },
  )
  pad_to_max_length: bool = field(
    default=False,
    metadata={
      "help": (
        "Whether to pad all samples to model maximum sentence length. "
        "If False, will pad the samples dynamically when batching to the maximum length in the batch. More "
        "efficient on GPU but very bad for TPU."
      )
    },
  )
  max_train_samples: Optional[int] = field(
    default=None,
    metadata={
      "help": (
        "For debugging purposes or quicker training, truncate the number of training examples to this "
        "value if set."
      )
    },
  )
  max_eval_samples: Optional[int] = field(
    default=None,
    metadata={
      "help": (
        "For debugging purposes or quicker training, truncate the number of evaluation examples to this "
        "value if set."
      )
    },
  )
  max_predict_samples: Optional[int] = field(
    default=None,
    metadata={
      "help": (
        "For debugging purposes or quicker training, truncate the number of prediction examples to this "
        "value if set."
      )
    },
  )
  label_all_tokens: bool = field(
    default=False,
    metadata={
      "help": (
        "Whether to put the label for one word on all tokens of generated by that word or just on the "
        "one (in which case the other tokens will have a padding index)."
      )
    },
  )
  copy_old_position_embedding: bool = field(
    default=True,
    metadata={
      "help": "Whether to use the pretrained position embedding when max seq length has mismatch"
    }
  )

  def __post_init__(self):
    if self.train_file is None and self.validation_file is None and self.test_file is None:
      raise ValueError("Need either a dataset name or a training/validation/test file.")


def main():
  # See all possible arguments in src/transformers/training_args.py
  # or by passing the --help flag to this script.
  # We now keep distinct sets of args, for a cleaner separation of concerns.

  parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
  if len(sys.argv) == 2 and sys.argv[1].endswith(".json"):
    # If we pass only one argument to the script and it's the path to a json file,
    # let's parse it to get our arguments.
    model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))
  else:
    model_args, data_args, training_args = parser.parse_args_into_dataclasses()

  Path(model_args.run_dir).mkdir(exist_ok=True)
  # Setup logging
  logging.basicConfig(
    level='INFO',
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%m/%d/%Y %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)],
  )

  log_level = training_args.get_process_log_level()
  logger.setLevel(log_level)
  datasets.utils.logging.set_verbosity(log_level)
  transformers.utils.logging.set_verbosity(log_level)
  transformers.utils.logging.enable_default_handler()
  transformers.utils.logging.enable_explicit_format()

  for child_logger in logging.root.manager.loggerDict.values():
    if not isinstance(child_logger, logging.Logger):
      continue
    if child_logger.propagate and child_logger != logging.root:
      continue
    child_logger.addHandler(logging.FileHandler(os.path.join(model_args.run_dir, 'train.log')))
  logger.addHandler(logging.FileHandler(os.path.join(model_args.run_dir, 'train.log')))

  # Log on each process the small summary:
  logger.warning(
    f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
    + f"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}"
  )
  logger.info(f"Training/evaluation parameters {training_args}")

  # Detecting last checkpoint.
  last_checkpoint = None
  if os.path.isdir(training_args.output_dir) and training_args.do_train and not training_args.overwrite_output_dir:
    last_checkpoint = get_last_checkpoint(training_args.output_dir)
    if last_checkpoint is None and len(os.listdir(training_args.output_dir)) > 0:
      raise ValueError(
        f"Output directory ({training_args.output_dir}) already exists and is not empty. "
        "Use --overwrite_output_dir to overcome."
      )
    elif last_checkpoint is not None and training_args.resume_from_checkpoint is None:
      logger.info(
        f"Checkpoint detected, resuming training at {last_checkpoint}. To avoid this behavior, change "
        "the `--output_dir` or add `--overwrite_output_dir` to train from scratch."
      )

  # Set seed before initializing model.
  set_seed(training_args.seed)

  # Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)
  # or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/
  # (the dataset will be downloaded automatically from the datasets Hub).
  #
  # For CSV/JSON files, this script will use the column called 'text' or the first column if no column called
  # 'text' is found. You can easily tweak this behavior (see below).
  #
  # In distributed training, the load_dataset function guarantee that only one local process can concurrently
  # download the dataset.
  data_files = {}
  example_file = None
  if data_args.train_file is not None:
    data_files["train"] = data_args.train_file
    example_file = data_args.train_file
  if data_args.validation_file is not None:
    data_files["validation"] = data_args.validation_file
    example_file = data_args.validation_file
  if data_args.test_file is not None:
    data_files["test"] = data_args.test_file
    example_file = data_args.test_file
  extension = example_file.split(".")[-1]
  raw_datasets = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir)
  # See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at
  # https://huggingface.co/docs/datasets/loading_datasets.html.

  # Load pretrained model and tokenizer
  #
  # Distributed training:
  # The .from_pretrained methods guarantee that only one local process can concurrently
  # download model & vocab.
  config = AutoConfig.from_pretrained(
    model_args.config_name if model_args.config_name else model_args.model_name_or_path,
    num_labels=2,
    id2label={0: 0, 1: 1},
    label2id={0: 0, 1: 1},
    cache_dir=model_args.cache_dir,
    **{'max_position_embeddings': data_args.max_seq_length+2 for _ in [1] if data_args.max_seq_length}
  )

  tokenizer_name_or_path = model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path
  if config.model_type in {"gpt2", "roberta"}:
    tokenizer = AutoTokenizer.from_pretrained(
      tokenizer_name_or_path,
      cache_dir=model_args.cache_dir,
      use_fast=True,
      add_prefix_space=True,
    )
  else:
    tokenizer = AutoTokenizer.from_pretrained(
      tokenizer_name_or_path,
      cache_dir=model_args.cache_dir,
      use_fast=True,
    )

  model = AutoModelForTokenClassification.from_pretrained(
    model_args.model_name_or_path,
    from_tf=bool(".ckpt" in model_args.model_name_or_path),
    config=config,
    cache_dir=model_args.cache_dir,
    ignore_mismatched_sizes=True,
  )

  if data_args.copy_old_position_embedding and data_args.max_seq_length:
    model_original = AutoModelForTokenClassification.from_pretrained(
      model_args.model_name_or_path,
      from_tf=bool(".ckpt" in model_args.model_name_or_path),
      cache_dir=model_args.cache_dir,
    )
    def get_embedding(model):
      return model.roberta.embeddings.position_embeddings
    original_max_len = get_embedding(model_original).num_embeddings
    used_len = min(original_max_len, get_embedding(model).num_embeddings)
    get_embedding(model).weight.data[:used_len, :] = get_embedding(model_original).weight.data[:used_len, :]
    del model_original
  
  print(model)

  # Tokenizer check: this script requires a fast tokenizer.
  if not isinstance(tokenizer, PreTrainedTokenizerFast):
    raise ValueError(
      "This example script only works for models that have a fast tokenizer. Checkout the big table of models at"
      " https://huggingface.co/transformers/index.html#supported-frameworks to find the model types that meet"
      " this requirement"
    )
  # Preprocessing the dataset
  # Padding strategy
  padding = "max_length" if data_args.pad_to_max_length else False

  # Tokenize all texts and align the labels with them.
  def tokenize_and_align_labels(examples):
    tokenized_inputs = tokenizer(
      [intent.split(' ') for intent in examples['intent']],
      [example.split(' ') for example in examples['example']],
      padding=padding,
      truncation=True,
      max_length=data_args.max_seq_length,
      # We use this argument because the texts in our dataset are lists of words (with a label for each word).
      is_split_into_words=True,
    )
    labels = []
    for i, label in enumerate(examples['tag']):
      word_ids = tokenized_inputs.word_ids(batch_index=i)
      previous_word_idx = None
      in_intent = False
      label_ids = []
      for word_idx in word_ids:
        if previous_word_idx is None and word_idx is not None:
          in_intent = not in_intent
        # Special tokens have a word id that is None. We set the label to -100 so they are automatically
        # ignored in the loss function.
        if word_idx is None or in_intent:
          label_ids.append(-100)
        # We set the label for the first token of each word.
        elif word_idx != previous_word_idx:
          label_ids.append(label[word_idx])
        # For the other tokens in a word, we set the label to either the current label or -100, depending on
        # the label_all_tokens flag.
        else:
          if data_args.label_all_tokens:
            label_ids.append(label[word_idx])
          else:
            label_ids.append(-100)
        previous_word_idx = word_idx

      labels.append(label_ids)
    tokenized_inputs["labels"] = labels
    return tokenized_inputs

  if training_args.do_train:
    if "train" not in raw_datasets:
      raise ValueError("--do_train requires a train dataset")
    train_dataset = raw_datasets["train"]
    if data_args.max_train_samples is not None:
      max_train_samples = min(len(train_dataset), data_args.max_train_samples)
      train_dataset = train_dataset.select(range(max_train_samples))
    with training_args.main_process_first(desc="train dataset map pre-processing"):
      train_dataset = train_dataset.map(
        tokenize_and_align_labels,
        batched=True,
        num_proc=data_args.preprocessing_num_workers,
        load_from_cache_file=not data_args.overwrite_cache,
        desc="Running tokenizer on train dataset",
      )

  if training_args.do_eval:
    if "validation" not in raw_datasets:
      raise ValueError("--do_eval requires a validation dataset")
    eval_dataset = raw_datasets["validation"]
    if data_args.max_eval_samples is not None:
      max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)
      eval_dataset = eval_dataset.select(range(max_eval_samples))
    with training_args.main_process_first(desc="validation dataset map pre-processing"):
      eval_dataset = eval_dataset.map(
        tokenize_and_align_labels,
        batched=True,
        num_proc=data_args.preprocessing_num_workers,
        load_from_cache_file=not data_args.overwrite_cache,
        desc="Running tokenizer on validation dataset",
      )

  if training_args.do_predict:
    if "test" not in raw_datasets:
      raise ValueError("--do_predict requires a test dataset")
    predict_dataset = raw_datasets["test"]
    if data_args.max_predict_samples is not None:
      max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)
      predict_dataset = predict_dataset.select(range(max_predict_samples))
    with training_args.main_process_first(desc="prediction dataset map pre-processing"):
      predict_dataset = predict_dataset.map(
        tokenize_and_align_labels,
        batched=True,
        num_proc=data_args.preprocessing_num_workers,
        load_from_cache_file=not data_args.overwrite_cache,
        desc="Running tokenizer on prediction dataset",
      )

  # Data collator
  data_collator = DataCollatorForTokenClassification(tokenizer, pad_to_multiple_of=8 if training_args.fp16 else None)

  # Metrics
  metric = load_metric("eval.py")

  def compute_metrics(p):
    predictions, labels = p
    predictions = np.argmax(predictions, axis=2)

    # Remove ignored index (special tokens)
    true_predictions = [
      [p for (p, l) in zip(prediction, label) if l != -100]
      for prediction, label in zip(predictions, labels)
    ]
    true_labels = [
      [l for (p, l) in zip(prediction, label) if l != -100]
      for prediction, label in zip(predictions, labels)
    ]

    return metric.compute(predictions=true_predictions, references=true_labels)

  # Initialize our Trainer
  from transformers.trainer import TrainerCallback
  class PrintLogCallback(TrainerCallback):
    def on_log(self, args, state, control, logs, **kwargs):
      from json import dumps
      logger.info("Metrics: %s", dumps(logs))
  trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset if training_args.do_train else None,
    eval_dataset=eval_dataset if training_args.do_eval else None,
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    callbacks=[PrintLogCallback]
  )

  # Training
  if training_args.do_train:
    checkpoint = None
    if training_args.resume_from_checkpoint is not None:
      checkpoint = training_args.resume_from_checkpoint
    elif last_checkpoint is not None:
      checkpoint = last_checkpoint
    train_result = trainer.train(resume_from_checkpoint=checkpoint)
    metrics = train_result.metrics
    trainer.save_model()  # Saves the tokenizer too for easy upload

    max_train_samples = (
      data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)
    )
    metrics["train_samples"] = min(max_train_samples, len(train_dataset))

    trainer.log_metrics("train", metrics)
    trainer.save_metrics("train", metrics)
    trainer.save_state()

  # Evaluation
  if training_args.do_eval:
    logger.info("*** Evaluate ***")

    metrics = trainer.evaluate()

    max_eval_samples = data_args.max_eval_samples if data_args.max_eval_samples is not None else len(eval_dataset)
    metrics["eval_samples"] = min(max_eval_samples, len(eval_dataset))

    trainer.log_metrics("eval", metrics)
    trainer.save_metrics("eval", metrics)

  # Predict
  if training_args.do_predict:
    logger.info("*** Predict ***")

    predictions, labels, metrics = trainer.predict(predict_dataset, metric_key_prefix="predict")
    predictions = np.argmax(predictions, axis=2)

    # Remove ignored index (special tokens)
    true_predictions = [
      [p for (p, l) in zip(prediction, label) if l != -100]
      for prediction, label in zip(predictions, labels)
    ]

    trainer.log_metrics("predict", metrics)
    trainer.save_metrics("predict", metrics)

    # Save predictions
    output_predictions_file = os.path.join(model_args.run_dir, "predictions.txt")
    
    import json
    if trainer.is_world_process_zero():
      with open(output_predictions_file, "w") as writer:
        for prediction in true_predictions:
          prediction = [int(i) for i in prediction]
          writer.write(json.dumps(prediction) + "\n")



def _mp_fn(index):
  # For xla_spawn (TPUs)
  main()


if __name__ == "__main__":
  main()
